/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

 #include <behaviors.dtsi>
 #include <dt-bindings/zmk/keys.h>
 #include <dt-bindings/zmk/bt.h>
 #include <dt-bindings/zmk/outputs.h>
 #include <dt-bindings/zmk/rgb.h>
 

#define DEFAULT 0
#define NUMB   1
#define SYMB   2
// #define FUNC   3
// #define MDIA   4

#define ALL_LYR 0 1 2 //3 4 

#define COMBO(NAME, BINDINGS, KEYPOS, TERM, LAYERS) \
        combo_##NAME { \
            timeout-ms = <TERM>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
        };
        
#define TDANCE(NAME, LABEL, B1, B2, TERM) \
        d_##NAME: ##NAME { \
            compatible = "zmk,behavior-tap-dance"; \
            label = ##LABEL; \
            #binding-cells = <0>; \
            tapping-term-ms = <TERM>; \
            bindings = <B1>, <B2>; \
        }; 

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };
&mt {
    tapping-term-ms = <200>;
};
/*                KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰────────╮30  31  32 │ │ 33  34  35╭────────╯
           ╰───────────╯ ╰───────────╯            */
 
 / {
    behaviors {
        shm: sub_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        TDANCE(esctab, "esctab", &kp ESC   , &kp TAB   , 300)
        TDANCE(altgui, "altgui", &kp LALT  , &kp LGUI  , 300)
        TDANCE(symbol, "symbol", &mo SYMBOL, &to SYMBOL, 300)
        TDANCE(ccopy,  "ccopy" , &kp LC(c) , &kp LC(x) , 200)
    };
 
     combos {
        compatible = "zmk,combos";
        COMBO(cexclaim,  &kp EXCL,    2 3,      50, DEFAULT)
        COMBO(combo_esc, &kp ESC,     0 1,      50, DEFAULT)
        COMBO(cquestion, &kp QMARK,   1 2,      50, DEFAULT)
        COMBO(c_dqt,     &kp DQT,     0 11,     50, DEFAULT)
        COMBO(c_at,      &kp AT,      1 10,     50, DEFAULT)
        COMBO(cpound,    &kp HASH,    2 11,     50, DEFAULT)
        COMBO(cdollar,   &kp DLLR,    3 12,     50, DEFAULT)
        COMBO(cpercent,  &kp PRCNT,   4 13,     50, DEFAULT)
        COMBO(c_amp,     &kp AMPS,    13 14,    50, DEFAULT)

        COMBO(clbrace,   &kp LBRC,    10 11,    50, DEFAULT)
        COMBO(crbrace,   &kp RBRC,    10 12,    50, DEFAULT)

        COMBO(clbrak,    &kp LBKT,    11 12,    50, DEFAULT)
        COMBO(crbrak,    &kp RBKT,    10 13,    50, DEFAULT)
        
        COMBO(c_lpar,    &kp LPAR,    11 13,    50, DEFAULT)
        COMBO(c_rpar,    &kp RPAR,    12 13,    50, DEFAULT)
        
        COMBO(ccaret,    &kp CARET,   10 23,    50, DEFAULT)
        COMBO(c_tild,    &kp LS(GRAVE), 11 23,  50, DEFAULT)
        COMBO(c_grv,     &kp GRAVE,   12 23,    50, DEFAULT)

        COMBO(c_min,     &kp MINUS,   5 6,      50, DEFAULT)
        COMBO(c_pipe,    &kp PIPE,    6 7,      50, DEFAULT)
        COMBO(c_under,   &kp UNDER,   7 8,      50, DEFAULT)
        COMBO(c_bslh,    &kp BSLH,    6 8,      50, DEFAULT)
        
        COMBO(cplus,     &kp KP_PLUS, 5 16,     50, 1)
        COMBO(cmult,     &kp ASTRK,   15 16,    50, 1)
        COMBO(cequ,      &kp EQUAL,   17 26,    50, 0 1)
    };
 
     keymap {
         compatible = "zmk,keymap";
 
         default {
 // --------------------------------------------------------------------------------------------------------------------------------------------------------------------
 //  Q    |  W  |  E  |  R  |  T  | |  Y  |  U  |  I  |    O    |  P   | 
 //  A    |  S  |  D  |  F  |  G  | |  H  |  J  |  K  |    L    |  ;   | 
 // Lsft/Z|  X  |  C  |  V  |  B  | |  N  |  M  |  ,  |    .    |Rsft//| 
 //      | LCTL | Bspc/LMOD | SPC | | Del/Num | Ent | Sym |
            bindings = <
            &kp SQT       &kp COMMA  &kp DOT     &kp P      &kp Y              &kp F     &kp G     &kp C       &kp R      &kp L
            &kp A         &kp O      &kp E       &kp U      &kp I              &kp D     &kp H     &kp T       &kp N      &kp S
            &mt LGUI SEMI &shm LALT Q &shm RCTRL J &kp K  &kp X              &kp B     &kp M     &shm RCTRL W &shm RALT V &mt RGUI Z
                          &mo 2      &lt 1 BSPC  &lt LSHIFT SPACE   &lt 1 TAB &lt 2 RET &mo 2
             >;
         };
         numbers {
 // --------------------------------------------------------------------------------------------------------------------------------------------------------------------
 //  1  |    2   |  3     |  4  |  5  | |  6  |  7  |  8  |  9  |  0  |  
 // TAB | BT_PRV | BT_NXT | VOL-| VOL+| |  <  |  v  |  ∧  |  >  |  '  |
 // Lsft| BT_SEL0| BT_CLR | MUTE|     | | HOME| END | PGUP| PGDN| Rsft|
 //               | LCTL | LMOD| LALT | | Num |     | BL-reset |
            bindings = <
             &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0
             &kp TAB &bt BT_PRV &bt BT_NXT &kp C_VOL_DN &kp C_VOL_UP &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp SQT
             &kp LSHFT &bt BT_SEL 0 &bt BT_CLR &kp C_MUTE &none &kp HOME &kp END &kp PG_UP &kp PG_DN &kp RSHFT
             &kp LCTRL &kp LGUI &kp LALT &trans &bootloader &none
             >;
         };
         symbol {
 // --------------------------------------------------------------------------------------------------------------------------------------------------------------------
 // ESC |  F1 |  F2 |  F3 |  F4 | | OUT_USB | OUT_BLE |        |  =  |  -   | 
 // CAPS|  F5 |  F6 |  F7 |  F8 | |    [    |    ]    |        |  `  |  \   | 
 // LSFT|  F9 | F10 | F11 | F12 | |         |         |        |     | RSFT |
 //         | LCTL | LMOD| LALT | |  RESET  |         |   SYM  |
            bindings = <
             &kp ESC &kp F1 &kp F2 &kp F3 &kp F4 &out OUT_USB &out OUT_BLE &none  &kp EQUAL &kp MINUS
             &kp CAPS &kp F5 &kp F6 &kp F7 &kp F8 &kp LBKT &kp RBKT &none &kp GRAVE &kp BSLH
             &kp LSHFT &kp F9 &kp F10 &kp F11 &kp F12 &none &none &none &kp RSHFT
             &kp LCTRL &kp LGUI &kp LALT &sys_reset &rgb_ug RGB_TOG &trans
            >;
         }; 
     };
 };